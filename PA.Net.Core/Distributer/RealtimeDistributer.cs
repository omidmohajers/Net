//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using PA.Codec;
using PA.Crypto;
using PA.Net.Clients;
using System;
using PA.Net.Core;
using PA.Net.Core.Sources;

namespace PA.Distributer
{
    public class RealtimeDistributer : IDisposable, IDistributer
    {
        private long userID;
        private long roomID;

        public virtual INetClient Client
        {
            get;
            set;
        }

        public virtual ICodec Codec
        {
            get;
            set;
        }

        public long UserID
        {
            get
            {
                return userID;
            }
        }

        public long RoomID
        {
            get
            {
                return roomID;
            }
        }

        public virtual MediaSource Source
        {
            get;
            set;
        }
        
        public event ExceptionReportHandler ExceptionReported;

        public virtual void Dispose()
        {
            
        }
        public RealtimeDistributer(INetClient client,long userID,long roomID)
        {
            Client = client;
            this.userID = userID;
            this.roomID = roomID;
        }

        public virtual void ListenToSideEvents()
        {

        }

        public void RaiseExceptionReported(Exception ex)
        {
            if (ExceptionReported != null)
                ExceptionReported(this, ex);
        }

        public virtual bool Start()
        {
            if(Client == null)
            {
                throw new Exception("ارتباط مشخص نشده است");
            }
            if(Client.Channel == null)
            {
                throw new Exception("کانال ارتباطی مشخص نشده است");
            }
            IChannel channel = Client.Channel;

            channel.DataReceived += Channel_DataReceived;

            if (Client.Channel.Closed)
                Client.Start();
            return true;
        }

        public virtual bool Stop()
        {
            if (Client == null)
            {
                throw new Exception("ارتباط مشخص نشده است");
            }
            if (Client.Channel == null)
            {
                throw new Exception("کانال ارتباطی مشخص نشده است");
            }
            Client.Stop();
            return true;
        }

        #region Channel Events
        //--------------------------------------------------------------------------------------
        private void Channel_DataReceived(object sender, INetClient client, byte[] data)
        {
            //------------------------ Processing Data as Package ------------------------------

            //----------------------------------------------------------------------------------
        }
        //--------------------------------------------------------------------------------------
        #endregion Channel Events
    }

}

