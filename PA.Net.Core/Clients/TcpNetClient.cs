//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Net;
using System.Net.Sockets;
using PA.Crypto;
using PA.Net.Collections;
using PA.Net.Core;

namespace PA.Net.Clients
{
    public class TcpNetClient : INetClient, System.IDisposable
    {
        protected TcpClient client;
        protected IChannel channel;
        protected ReportCollection Log = new ReportCollection();

        public event EventHandler DisconnectSuceeded;
        public event EventHandler DisconnectFaild;
        public event EventHandler ConnectionSuceeded;
        public event EventHandler ConnectionFailed;
        public event ExceptionReportHandler ExceptionReported;

        public int ID
        {
            get;
            set;
        }
        public virtual IPAddress IP
        {
            get
            {
                if (Connected)
                    return ((IPEndPoint)client.Client.LocalEndPoint).Address;
                else
                    return IPAddress.None;
            }
        }
        public virtual int Port
        {
            get
            {
                if (Connected)
                    return ((IPEndPoint)client.Client.LocalEndPoint).Port;
                else
                    return -1;
            }
        }
        public bool Connected
        {
            get
            {
                if (client != null)
                    return client.Connected;
                else
                    return false;
            }
        }
        public long UserID
        {
            get;
            set;
        }
        public string ClientName
        {
            get;
            set;
        }
        public TcpClient Client
        {
            get
            {
                return client;
            }

            set
            {
                client = value;
            }
        }
        public IChannel Channel
        {
            get
            {
                return channel;
            }
        }
        public CryptoTypes ChannelType { get; protected set; }
        public TcpNetClient()
        {
            client = new TcpClient();
        }
        public TcpNetClient(int id, long userID):base()
        {
            ID = id;
            UserID = userID;
        }
        public virtual void Dispose()
        {
            channel.Stop();
            if (Connected)
            {
                Disconnect();
            }
            channel = null;
            client = null;
        }

        public virtual bool Connect(IPAddress serverIP, int port, CryptoTypes channelType)
        {
            Log.Add(ReportType.Event, ClientName, "Connect.");
            return true;
        }

        public virtual bool Disconnect()
        {
            Log.Add(ReportType.Event, ClientName, "Disconnect.");
            return true;
        }

        public virtual void Init()
        {

        }

        public virtual void Start()
        {
            if (channel == null)
                throw new Exception("پل ارتباطی مشخص نشده است!!!");
            if (channel.Closed)
                channel.Start();
            Log.Add(ReportType.Event, ClientName, "Start.");
        }

        public virtual void Stop()
        {
            channel.Stop();
            Log.Add(ReportType.Event, ClientName, "Stop.");
        }
        public bool Send(byte[] pocket)
        {
            try
            {
                channel.SendBuffer.SetBuffer(pocket);
                return true;
            }
            catch(Exception ex)
            {
                RaiseExceptionReported(ex);
                return false;
            }
        }

        private void RaiseExceptionReported(Exception ex)
        {
            if (ExceptionReported != null)
                ExceptionReported(this, ex);
        }

        public void RaiseDisconnectSuceeded()
        {
            if (DisconnectSuceeded != null)
                DisconnectSuceeded(this, EventArgs.Empty);
            Log.Add(ReportType.Event, ClientName, "Disconnected.");
        }
        public void RaiseDisconnectFaild()
        {
            if (DisconnectFaild != null)
                DisconnectFaild(this, EventArgs.Empty);
            Log.Add(ReportType.Error, ClientName, "Disconnect Faild.");
        }
        public void RaiseConnectionSuceeded()
        {
            if (ConnectionSuceeded != null)
                ConnectionSuceeded(this, EventArgs.Empty);
            Log.Add(ReportType.Event, ClientName, "Connected.");
        }
        public void RaiseConnectionFailed()
        {
            if (ConnectionFailed != null)
                ConnectionFailed(this, EventArgs.Empty);
            Log.Add(ReportType.Error, ClientName, "Connect Faild.");
        }

        //------------------------------ Channel ---------------------------------------
        public virtual void CreateChannel(CryptoTypes channelType)
        {
            ChannelType = channelType;
            switch (channelType)
            {
                case CryptoTypes.Open:
                    channel = new OpenChannel(client.GetStream(), this,false);
                    break;
                case CryptoTypes.AES:
                    channel = new AESChannel(client.GetStream(), this, false);
                    break;
                case CryptoTypes.RSA:
                    channel = new RSAChannel(client.GetStream(), this, false);
                    break;
            }
            channel.DataReceived += Channel_DataReceived;
            channel.ReadFinished += Channel_ReadFinished;
            channel.ReadStarted += Channel_ReadStarted;
            channel.ReceivingFailed += Channel_ReceivingFailed;
            channel.SendingFailed += Channel_SendingFailed;
            channel.SendingSuceeded += Channel_SendingSuceeded;
            channel.WriteFinished += Channel_WriteFinished;
            channel.WriteStarted += Channel_WriteStarted;

            channel.Start();
        }
        #region Channel Events
        //--------------------------------------------------------------------------------------
        private void Channel_WriteStarted(object sender, EventArgs e)
        {
            Log.Add(ReportType.Event, ClientName, "Write Started.", null, DateTime.Now);
        }

        private void Channel_WriteFinished(object sender, EventArgs e)
        {
            Log.Add(ReportType.Event, ClientName, "Write Finished.", null, DateTime.Now);
        }

        private void Channel_SendingSuceeded(object sender, EventArgs e)
        {
            Log.Add(ReportType.Event, ClientName, "Data Sent.", null, DateTime.Now);
        }

        private void Channel_SendingFailed(object sender, Exception ex)
        {
            Log.Add(ReportType.Error, ClientName, "Send Faild.", ex, DateTime.Now);
        }

        private void Channel_ReceivingFailed(object sender, Exception ex)
        {
            Log.Add(ReportType.Error, ClientName, "Receive Faild.", ex, DateTime.Now);
        }

        private void Channel_ReadStarted(object sender, EventArgs e)
        {
            Log.Add(ReportType.Event, ClientName, "Read Started.", null, DateTime.Now);
        }

        private void Channel_ReadFinished(object sender, EventArgs e)
        {
            Log.Add(ReportType.Event, ClientName, "Read Finished.", null, DateTime.Now);
        }

        private void Channel_DataReceived(object sender,INetClient client, byte[] data)
        {
            //------------------------ Processing Data as Package ------------------------------







            //----------------------------------------------------------------------------------
        }
        //--------------------------------------------------------------------------------------
        #endregion Channel Events
        //------------------------------------------------------------------------------

    }
}


