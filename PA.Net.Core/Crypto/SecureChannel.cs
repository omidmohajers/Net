//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using PA.Comperssion.Core;
using System.IO;
using PA.Net.Clients;
using System;
using System.Threading;
using PA.Net.Core;

namespace PA.Crypto
{
    public class SecureChannel : IChannel
    {
        protected Stream baseStream;
        protected INetClient client;
        protected Thread reader;
        protected Thread writer;
        protected ManualResetEvent readerSetter;
        protected ManualResetEvent writerSetter;
        protected bool closed = true;
        protected bool sending = false;
        protected const int sliceSize = 1024;

        public event DataReceiveHandler DataReceived;
        public event EventHandler SendingSuceeded;
        public event ExceptionReportHandler SendingFailed;
        public event ExceptionReportHandler ReceivingFailed;
        public event EventHandler ReadStarted;
        public event EventHandler ReadFinished;
        public event EventHandler WriteStarted;
        public event EventHandler WriteFinished;

        public virtual Stream BaseStream
        {
            get
            {
                return baseStream;
            }
        }

        public virtual BufferManager<byte[]> SendBuffer
        {
            get;
            set;
        }

        public CryptoTypes CryptoType
        {
            get;
        }

        public INetClient Client
        {
            get
            {
                return client;
            }
        }

        public bool Closed
        {
            get
            {
                return closed;
            }
        }

        public bool IsEndPoint
        {
            get; protected set;
        }

        public SecureChannel(Stream stream, INetClient netClient, bool endPoint)
        {
            baseStream = stream;
            client = netClient;
            IsEndPoint = endPoint;
            SendBuffer = new BufferManager<byte[]>(client.ID);
            readerSetter = new ManualResetEvent(false);
            writerSetter = new ManualResetEvent(false);
        }

        public virtual void Read()
        {
            RaiseReadStarted();
            while (!closed)
            {
                //readerSetter.WaitOne();
                try
                {
                    int len = 0;
                    if (!client.Connected)
                        break;
                    byte[] bufferSize = null;
                    int bytesRemain = 4;
                    byte[] data = null;
                    byte[] bytes = null;
                    while (bytesRemain > 0)
                    {
                        bytes = new byte[bytesRemain];
                        len = baseStream.Read(bytes, 0, bytes.Length);
                        if (len == 0)
                            continue;
                        if (len != bytes.Length)
                        {
                            byte[] tmp = new byte[len];
                            Array.Copy(bytes, tmp, tmp.Length);
                            bytes = tmp;
                        }
                        if (data == null)
                        {
                            data = new byte[bytes.Length];
                            Array.Copy(bytes, data, bytes.Length);
                        }
                        else
                        {
                            byte[] tmp = new byte[data.Length + bytes.Length];
                            Array.Copy(data, tmp, data.Length);
                            Array.Copy(bytes, 0, tmp, data.Length, bytes.Length);
                            data = tmp;
                        }
                        bytesRemain -= len;
                    }
                    bytes = data;
                    bufferSize = new byte[bytes.Length];
                    Array.Copy(bytes, bufferSize, bytes.Length);

                    bytesRemain = BitConverter.ToInt32(bufferSize, 0);
                    data = null;
                    if (!client.Connected)
                        break;
                    //--------------------------------------------------------
                    while (bytesRemain > 0)
                    {
                        try {
                            if (bytesRemain > sliceSize)
                                bytes = new byte[sliceSize];
                            else
                                bytes = new byte[bytesRemain];
                            len = baseStream.Read(bytes, 0, bytes.Length);
                            if (len == 0)
                                continue;
                            if (len != bytes.Length)
                            {
                                byte[] tmp = new byte[len];
                                Array.Copy(bytes, tmp, tmp.Length);
                                bytes = tmp;
                            }
                            if (data == null)
                            {
                                data = new byte[bytes.Length];
                                Array.Copy(bytes, data, bytes.Length);
                            }
                            else
                            {
                                byte[] tmp = new byte[data.Length + bytes.Length];
                                Array.Copy(data, tmp, data.Length);
                                Array.Copy(bytes, 0, tmp, data.Length, bytes.Length);
                                data = tmp;
                            }
                        }
                        catch(Exception ex)
                        {
                            RaiseReceivingFailed(ex);
                        }
                        finally
                        {
                            bytesRemain -= bytes.Length;
                        }
                    }
                    if (IsEndPoint)
                        data = (byte[])Decrypt(data);

                    RaiseDataReceived((Byte[])data.Clone());
                }
                catch (Exception ex)
                {
                    RaiseReceivingFailed(ex);
                }
                finally
                {
                    //readerSetter.Reset();
                }
            }
            RaiseReadFinished();
        }

        public virtual void Write()
        {
            RaiseWriteStarted();
            while (!closed)
            {
                while (SendBuffer.Count == 0)
                {
                    Thread.Sleep(100);
                }
                //writerSetter.WaitOne();
                try
                {
                    //----------------------------------------------------
                    byte[] buffer = SendBuffer.GetBuffer();
                    if (IsEndPoint)
                        buffer = (byte[])Eccrypt(buffer);
                    byte[] sizeBuff = new byte[4];
                    sizeBuff = BitConverter.GetBytes(buffer.Length);
                    baseStream.Write(sizeBuff, 0, 4);
                    baseStream.Flush();

                    baseStream.Write(buffer, 0, buffer.Length);
                    baseStream.Flush();
                    RaiseSendSuccessfull();
                }
                catch (Exception ex)
                {
                        RaiseSendFailed(ex);
                }
                finally
                {
                    //writerSetter.Reset();
                }
                //-----------------------------------------------------
            }
            RaiseWriteFinished();
        }
        public virtual void Start()
        {
            if (client == null)
                throw new Exception("سوکت اتصال مشخص نشده است!");
            if (!client.Connected)
                throw new Exception("سوکت متصل نیست!!!");
            if (baseStream == null)
                throw new Exception("جریان داده مشخص نشده است!");
            //------------------------------------------------------------
            closed = false;
            //------------------------------------------------------------
            reader = new Thread(new ThreadStart(Read));
            reader.IsBackground = true;
            reader.Name = string.Format("Channel For {0} reader", client.ClientName);
            reader.Start();
            //------------------------------------------------------------
            writer = new Thread(new ThreadStart(Write));
            writer.IsBackground = true;
            writer.Name = string.Format("Channel For {0} writer", client.ClientName);
            writer.Start();
        }

        public virtual void Stop()
        {
            closed = true;
        }

        public virtual object Eccrypt(object data)
        {
            return data;
        }

        public virtual object Decrypt(object data)
        {
            return data;
        }
        //--------------------------------------------------------------------
        public virtual void RaiseReadFinished()
        {
            if (ReadFinished != null)
                ReadFinished(this, EventArgs.Empty);
            reader = null;
        }

        public virtual void RaiseReadStarted()
        {
            if (ReadStarted != null)
                ReadStarted(this, EventArgs.Empty);
        }

        public virtual void RaiseReceivingFailed(Exception ex)
        {
            if (ReceivingFailed != null)
                ReceivingFailed(this, ex);
        }

        public virtual void RaiseDataReceived(byte[] data)
        {
            if (DataReceived != null)
                DataReceived(this, client, data);
        }
        public virtual void RaiseWriteFinished()
        {
            if (WriteFinished != null)
                WriteFinished(this, EventArgs.Empty);
            writer = null;
        }

        public virtual void RaiseWriteStarted()
        {
            if (WriteStarted != null)
                WriteStarted(this, EventArgs.Empty);
        }

        public virtual void RaiseSendSuccessfull()
        {
            if (SendingSuceeded != null)
                SendingSuceeded(this, EventArgs.Empty);
        }

        public virtual void RaiseSendFailed(Exception ex)
        {
            if (SendingFailed != null)
                SendingFailed(this, ex);
        }
    }
}


