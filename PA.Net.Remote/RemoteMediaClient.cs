//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using PA.Crypto;
using PA.Net.Core;
using System.Collections.Generic;
using System.Net.Sockets;
using System;
using PA.Codec;
using System.Text;

namespace PA.Net.Clients
{
    public class RemoteMediaClient : RemoteTcpClient
    {
        public virtual long RoomID
        {
            get;
            set;
        }
        public VideoCodecTypes VideoCodecType { get; private set; }
        public List<Box<long, long>> ConfirmedUsers { get; private set; }
        public bool VideoConfirmed { get; set; }
        public bool AudioConfirmed { get; set; }
        public event EventHandler VideoConfirmSucceessfully = null;
        public event EventHandler AudioConfirmSuccessfully = null;
        public event DataReceiveHandler VideoPackageReceived = null;
        public event DataReceiveHandler AudioPackageReceived = null;
        public event EventHandler UserMediaReceived = null;
        public RemoteMediaClient(TcpClient client, int id,CryptoTypes securityType):base()
        {
            ID = id;
            Client = client;
            CreateChannel(securityType);
            // ---------------------------------- Channel Events-----------------------------------
            channel.DataReceived += Channel_DataReceived;
            // ------------------------------------------------------------------------------------
            Start();
        }

        private void Channel_DataReceived(object sender, INetClient client, byte[] data)
        {
            if (data == null)
                return;
            Package pak = Package.FromByteArray(data);
            pak.SenderIP = this.IP;
            pak.SenderPort = this.Port;
            switch (pak.CommandType)
            {
                //----------------------------------1----------------------------------------
                case CommandType.Hello:
                    GetLoginInfo(pak);
                    break;
                //---------------------------------------------------------------------------
                case CommandType.Goodbye:
                    break;
                case CommandType.ConfirmMediaForAll:
                    break;
                //----------------------------------2----------------------------------------
                case CommandType.ConfirmVideoForAll:
                    VideoConfirmed = true;
                    if (VideoConfirmSucceessfully != null)
                        VideoConfirmSucceessfully(this, EventArgs.Empty);
                    break;
                case CommandType.ConfirmAudioForAll:
                    AudioConfirmed = true;
                    if (AudioConfirmSuccessfully != null)
                        AudioConfirmSuccessfully(this, EventArgs.Empty);
                    break;
                //---------------------------------------------------------------------------
                case CommandType.MediaBroadcast:
                    break;
                //--------------------------------3------------------------------------------
                case CommandType.VideoBroadcast:
                    if (VideoPackageReceived != null)
                        VideoPackageReceived(this, client, data);
                    break;
                //-------------------------------3-------------------------------------------
                case CommandType.AudioBroadcast:
                    if (AudioPackageReceived != null)
                        AudioPackageReceived(this, client, data);
                    break;
                //---------------------------------------------------------------------------
                case CommandType.UserWebcamDeliverd:
                case CommandType.UserSoundDeliverd:
                    if (UserMediaReceived != null)
                        UserMediaReceived(this, EventArgs.Empty);
                    break;
            }
        }

        private void GetLoginInfo(Package pak)
        {
            UserID = pak.UserID;
            RoomID = pak.RoomID;
            VideoCodecType = (VideoCodecTypes)int.Parse(Encoding.UTF8.GetString(pak.Data));
        }

        public void AddPermission(long roomID, long userID, bool can)
        {
            if (!ExistsUser(roomID, userID))
                ConfirmUser(roomID, userID);
        }
        public bool ExistsUser(long roomID, long userID)
        {
            if (ConfirmedUsers == null)
                ConfirmedUsers = new List<Box<long,long>>();
            var data = ConfirmedUsers.Find(item => item.Key == roomID && item.Value == userID);
            return data != null;
        }
        public void ConfirmUser(long roomID, long userID)
        {
            if (ConfirmedUsers == null)
                ConfirmedUsers = new List<Box<long, long>>();
            ConfirmedUsers.Add(new Box<long, long>(roomID, userID));
        }

    }
}


